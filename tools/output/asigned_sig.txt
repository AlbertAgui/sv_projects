/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VECTOR_LANE.sv:92:    input [VADDR_WIDTH-1:0]         src1_i,
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VECTOR_LANE.sv:885:    .src1_vreg_addr_i       (src1_i),                     //..source vector register address 1    (queue  -> slave)
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VECTOR_LANE.sv:966:    .src1_i                     ( src1_i                    ),
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VECTOR_LANE.sv:1092:    .src1_i                 ( src1_i                        ),
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VECTOR_LANE.sv:1281:    .src1_i             ( src1_i                    ),
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VRF_mapper.sv:29:    input [VADDR_WIDTH-1:0] src1_i,
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VRF_mapper.sv:71:    arith_oprnd[1]  = arith_grant_i ? src1_i       : reg_src1;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VRF_mapper.sv:90:            reg_src1 <= src1_i;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/valid_bit.sv:28:    input                   read_en1_i,     //! From Issue Stage (Arith Queue), when set, it enables the reading of the valid bit for the physical register pointed by "src1_i", i.e. it asks if the physical reg. pointed by src1_i is valid, the result to this is taken the next cycle from the "valid_bit_src1_o" port.
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/valid_bit.sv:29:    input [VADDR_WIDTH-1:0] src1_i,         //! From Issue Stage (Arith Queue), when "read_en1_i" is set, the value of this port is used to indicate the physical register of the source 1, needed by the instruction on top of the arith queue.
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/valid_bit.sv:114:            valid_bit_src1 <= (valid_bits[0][src1_i] && valid_bits[1][src1_i]);
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VRF_slice_wrapper.sv:37:  input [VADDR_WIDTH-1:0]                  src1_i,
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/VRF_slice_wrapper.sv:152:    .src1_i             ( src1_i                ),
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FSM_lane.sv:38:    input               [VADDR_WIDTH-1:0]   src1_i,
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FSM_lane.sv:222:                arith_src1              <= src1_i;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:207:wire src1_is_scalar; // SET IF THE INSTRUCTION USES EITHER AN IMMEDIATE OR A SCALAR CORE SOURCE, INSTEAD OF SRC1
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:208:reg src1_is_scalar_q;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:323:                if (src1_is_scalar) begin // IT MEANS WE HAVE FINISHED THE WIDENING OF THE UNIQUE SOURCE 2, WE HAVE TO RESTORE THAT PHYSICAL REG
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:348:                    if(src1_is_scalar) begin
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:634:assign src1_valid = instr_i[35] && !src1_is_scalar;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:659:assign src1_is_scalar = ((funct3[0] & funct3[1]) | funct3[2] | vext) && !((funct6 == SLIDE_UP) | (funct6 == SLIDE_DWN));
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:775:        src1_is_scalar_q     <= 1'b0;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:815:            src1_is_scalar_q     <= 1'b0;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:865:                    src1_is_scalar_q        <= src1_is_scalar;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:900:                    src1_is_scalar_q        <= 1'b0;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/renaming_logic.sv:1196:assign instr_o[32:27] = restore_src1 ? vw_physical_src1 : ( (move_op_q & !move_create_mask_q & (aux_instr_q | vmv_scalar_q)) | (move_op_q & src1_is_scalar_q) ) ? old_dest_addr :  src1_physical_addr;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/arith_queue.sv:93:wire src1_is_scalar;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/arith_queue.sv:204:assign src1_is_scalar       = ((funct_3 == OPIVI) | (funct_3 == OPIVX) | (funct_3 == OPFVF) | (funct_3 == OPMVX) | (funct_3 == OPCFG) | vext) && !((funct_6 == VSLIDE_UP) | (funct_6 == VSLIDE_DWN)); //funct_3[2] | funct_3[1] & funct_3[0]
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/arith_queue.sv:205:assign three_sources        = (src1_valid || src1_is_scalar) & src2_valid & src3_valid;        // Due to the new structure of the command
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/arith_queue.sv:206:assign two_sources          = (src1_valid || src1_is_scalar) & src2_valid & ~src3_valid;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/arith_queue.sv:214:assign valid_sources        = three_sources ? ((src1_valid_i | src1_is_scalar) & src2_valid_i & src3_valid_i) :
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/arith_queue.sv:215:                                                two_sources ? ((src1_valid_i | src1_is_scalar) & src2_valid_i) :
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/arith_queue.sv:241:assign read_src1_valid_o        = valid_instr & src1_valid & (!src1_is_scalar | (vmv_instr | vmv_scalar)) && !(narrowing_instr && !aux_instr); // We add the condition for scalar move operations
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2343:logic [ELEN-1 :0] src1_index;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2353:            src1_index =(count_i<<$clog2(N_LANES*8))+(LANE_ID<<3);
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2355:                adder_source_1_indexer[i*8+:8] = src1_index[7:0];
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2361:            src1_index =(count_i<<$clog2(N_LANES*4))+(LANE_ID<<2);
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2363:                adder_source_1_indexer[i*16+:16] = src1_index[15:0];
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2369:            src1_index =(count_i<<$clog2(N_LANES*2))+(LANE_ID<<1);
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2371:                adder_source_1_indexer[i*32+:32] = src1_index[31:0];
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2377:            src1_index =(count_i<<$clog2(N_LANES*1))+(LANE_ID);
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2378:            adder_source_1_indexer = src1_index;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2383:            src1_index = 'h0; //OPTIMIZATION
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/FunctionalUnit.sv:2469:        out_id_overflow       <= src1_index[3*OVERFLOW_ID_WIDTH-1:2*OVERFLOW_ID_WIDTH]; // USED TO IDENTIFY THE ELEMENT IDs BEING PROCESSED
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/vector_lane_wrapper.sv:78:wire [5:0]  src1_int;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/vector_lane_wrapper.sv:279:    .rf_src1_addr_o     ( src1_int              ),
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/vector_lane_wrapper.sv:489:    .src1_i                 ( src1_int                          ),
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/multi_lane_wrapper.sv:122:wire [VADDR_WIDTH-1:0]  src1_issue_lane;
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/multi_lane_wrapper.sv:756:    .src1_addr_o            ( src1_issue_lane           ),
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/multi_lane_wrapper.sv:1393:            .src1_i                 ( src1_issue_lane                   ),
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/vec_element_ctrl_lane.sv:47:   ud_elements_lane_i, ud_elen_lane_i, slide_lane_i, src1_vreg_addr_i,
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/vec_element_ctrl_lane.sv:162:  input   wire  [VADDR_WIDTH-1:0]               src1_vreg_addr_i;       //..source vector register address 1    (queue  -> slave)
/home/bscuser/Escritorio/Vector_Accelerator/src/rtl/vec_element_ctrl_lane.sv:354:        src1_vreg_addr_reg  <= src1_vreg_addr_i;
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_arith_queue.sv:50:    input src1_is_scalar,
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_arith_queue.sv:79:	 (instr_queue[read_pointer][53] && valid_instr && !src1_is_scalar)==read_src1_valid_o ##0
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_arith_queue.sv:99:		if (two) (req_o |-> ((src1_valid_i || src1_is_scalar) ##0 src2_valid_i))
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_VRF_slice_wrapper.sv:23:    input [5:0]                 src1_i,
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_VRF_slice_wrapper.sv:63:	@(posedge clk) (arith_grant |-> s_valid_reg_addr(src1_i) ##0 s_valid_reg_addr(src2_i) ##0 s_valid_reg_addr(src3_i) ##0 s_valid_reg_addr(dst_i));
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_VRF_slice_wrapper.sv:111:		src1_reg = (arith_grant_i) ? src1_i : src1_reg;
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_VRF_slice_wrapper.sv:146:	!$isunknown(src1_i) ##0 !$isunknown(src2_i) ##0 !$isunknown(src3_i) ##0 !$isunknown(dst_i);
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_VRF_slice_wrapper.sv:204:a_corr_arith_mapping_imm : assert property (disable iff (!rsn_i) p_corr_arith_mapping_imm(clk_i, arith_grant_i, src1_i, src2_i, src3_i, dst_i)) else $error("error.VU.%m");
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_VRF_slice_wrapper.sv:224:	c_src1 : coverpoint src1_i  {
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_FSM_lane.sv:32:    input               [5:0]   src1_i,
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_FSM_lane.sv:276:    !req_i ##0 !src1_valid_i ##0 all_zeros(src1_i) ##0 !src2_valid_i ##0 all_zeros(src2_i) ##0 
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_FSM_lane.sv:306:      $isunknown(src3_valid_i) || $isunknown(src1_i) || $isunknown(src2_i) || $isunknown(src3_i) ||
/home/bscuser/Escritorio/Vector_Accelerator/src/checkers/ck_FSM_lane.sv:1026:a_RF_source_operand_in_FILL_A : assert property (disable iff (!rsn_i) p_RF_source_operand_in_state(clk_i, rsn_i, FILL_A, src1_i))
